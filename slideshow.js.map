{"version":3,"sources":["slideshow.coffee"],"names":[],"mappings":"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","file":"slideshow.js","sourceRoot":"/source/","sourcesContent":["'use strict'\n# requestAnimationFrame polyfill\n# http://paulirish.com/2011/requestanimationframe-for-smart-animating/\n# http://my.opera.com/emoller/blog/2011/12/20/requestanimationframe-for-smart-er-animating\n\n# requestAnimationFrame polyfill by Erik Möller. fixes from Paul Irish and Tino Zijdel\n\n# MIT license\n\ndo (root = window ? this) ->\n  lastTime = 0\n  vendors = ['ms', 'moz', 'webkit', 'o']\n  i = 0\n  while i < vendors.length and not root.requestAnimationFrame\n    vendor = vendors[i++]\n    root.requestAnimationFrame = root[\"#{vendor}RequestAnimationFrame\"]\n    root.cancelAnimationFrame = root[\"#{vendor}CancelAnimationFrame\"] ? root[\"#{vendor}CancelRequestAnimationFrame\"]\n\n\n  unless root.requestAnimationFrame?\n    root.requestAnimationFrame = (callback) ->\n      currTime = new Date().getTime()\n      timeToCall = Math.max 0, 16 - (currTime - lastTime)\n      id = root.setTimeout (-> callback currTime + timeToCall), timeToCall\n      lastTime = currTime + timeToCall\n      id\n\n  unless root.cancelAnimationFrame?\n    root.cancelAnimationFrame = (id) ->\n      clearTimeout id\n\n# end requestAnimationFrame polyfill\n\n# indexOf(array, match) is equivalent to array.indexOf(match)\n\nindexOf = (array, match) ->\n  return unless array?\n  if Array::indexOf?\n    return Array::indexOf.call Array::slice.call(array), match\n  for item, i in array when item is match\n    return i\n  -1\n\n# extend target with properties from object in objects\n\nextend = (target, objects...) ->\n  return unless typeof target is 'object'\n  for object in objects\n    for own prop of object\n      target[prop] = object[prop]\n  target\n\n# shallow clone object\n\nclone = (object) -> extend {}, object\n\n# bind(fn, context) binds context to fn\n\nbind = (fn, context) -> -> fn.apply context, [].slice.call arguments\n\nnow = Date.now ? -> new Date().getTime()\n\nclass Slideshow\n  constructor: (element, options = {}) ->\n    # test if element is a valid html element or maybe\n    # a jQuery object or Backbone View\n    unless element.nodeType is 1\n      if element[0]? then element = element[0] # jQuery\n      if element.el? then element = element.el # Backbone\n    if element.nodeType isnt 1\n      throw new Error 'No valid element provided'\n    @configure options\n    @el = element\n    # and go!\n    init.call @\n\n  configure: (options) ->\n    @options = extend {}, defaults, options\n    if typeof @options.effect is 'string' and effects[@options.effect]?\n      @options.effect = clone effects[@options.effect]\n      @options.effect.conditions ?= effects.default.conditions.concat()\n\n  # private API\n\n  defaults =\n    touchEventsEnabled: true\n    mouseEventsEnabled: true\n    swipeThreshold: 0\n    animationDuration: 400\n    animationDirection: 'x'\n    effect: 'default'\n\n  effects =\n    default: do ->\n\n      transformCSSProperty = do ->\n        style = document.createElement('div').style\n        return 'transform' if style['transform']?\n        for vendor in ['moz', 'webkit', 'khtml', 'o', 'ms']\n          prefixed = \"#{vendor}Transform\"\n          return prefixed if style[prefixed]?\n        false\n\n      conditions: [\n        progress: .1\n        time: 250\n        durationModifier: .5\n      ,\n        progress: .3\n        time: 500\n      ,\n        progress: .5\n      ]\n      before: (slideState, slideElement) ->\n        slideElement.style.display = 'block'\n        ###\n        slideState  is either -1, 0 or 1\n        if slideState === 0 then this is the current slide and we want to show it, so set translateX(0)\n        if slideState === -1 then this is the previous slide (to the left) so translateX(-100%)\n        if slideState === 1 then this is the next slide (to the right) so translateX(100%)\n        ###\n        X = -slideState * 100\n        if transformCSSProperty\n          slideElement.style[transformCSSProperty] = \"translateX(#{X}%)\"\n        else\n          slideElement.style.left = \"#{X}%\"\n      progress: (slideState, progress, slideElement) ->\n        ###\n        slideState = either 0 or 1\n        0 <= Math.abs(progress) <= 1, but progress can also be negative.\n        progress < 0 indicates movement to the left\n        progress > 0 indicates movement to the right\n\n        if slideState === 0 then this is the current slide and we want it to move away as progress increases:\n        X1 = 100 * p where p = progress\n        if slideState === 1 then this is the target slide and we want it to move in from the left/right as progress increases:\n        X2 = 100 * (-p / |p|) * (|p| - 1) where |p| = Math.abs(progress)\n\n        X = (1 - S) * X1 + S * X2 where S = slideState\n        X is the translateX value that should be set on this slide\n\n        X = (1 - S) * 100 * p + S * 100 * (-p / |p|) * (1 - |p|)\n        X = 100 * p * ( (1 - S) - S * (1 / |p|) * (1 - |p|) )\n        X = 100 * p * ( 1 - S - S * ( (1 / |p|) - 1 ) )\n        X = 100 * p * ( 1 - S + S * (1 - (1 / |p|) ) )\n        X = 100 * p * ( 1 - S + S - (S / |p|) )\n        X = 100 * p * ( 1 - (S / |p|) )\n        ###\n        X = 100 * progress * (1 - slideState / Math.abs progress)\n        if transformCSSProperty\n          slideElement.style[transformCSSProperty] = \"translateX(#{X}%)\"\n        else\n          slideElement.style.left = \"#{X}%\"\n      after: (slideState, slideElement) ->\n        ###\n        slideState is either 0 or 1\n        if slideState === 0 then this is the previously visible slide and it must be hidden\n        if slideState === 1 then this is the currently visible slide and it must be visible\n        ###\n        slideElement.style.display = if slideState > 0 then 'block' else 'none'\n\n  init = ->\n    initSlides.call @\n    initEvents.call @\n\n  initSlides = ->\n    # we don't want the slides to be visible outside their container\n    effectBefore = @options.effect.before ? Function.prototype\n    effectAfter = @options.effect.after ? Function.prototype\n    # el.children may behave weird in IE8\n    @slides = @el.children ? @el.childNodes\n    @current = 0\n    for slide, i in @slides when i isnt @current\n      # call the before and after functions once on all slides, so all slides\n      # are positioned properly\n      if i is @current\n        effectBefore.call @, 0, @slides[@current]\n        effectAfter.call @, 1, @slides[@current]\n      else\n        effectBefore.call @, 1, slide\n        effectAfter.call @, 0, slide\n\n  initEvents = ->\n    @eventStart = bind eventStart, @\n    @eventProgress = bind eventProgress, @\n    @eventEnd = bind eventEnd, @\n    # check for TouchEvent support and if enabled in options\n    if TouchEvent? and @options.touchEventsEnabled\n      @el.addEventListener 'touchstart', @eventStart\n      @el.addEventListener 'touchmove', @eventProgress\n      @el.addEventListener 'touchend', @eventEnd\n    # check for MouseEvent support and if enabled in options\n    if MouseEvent? and @options.mouseEventsEnabled\n      @el.addEventListener 'mousedown', @eventStart\n      @el.addEventListener 'mousemove', @eventProgress\n      @el.addEventListener 'mouseup', @eventEnd\n      @el.addEventListener 'mouseleave', @eventEnd\n      for slide in @slides\n        slide.addEventListener 'mousedown', preventDefault\n        slide.addEventListener 'mousemove', preventDefault\n        slide.addEventListener 'mouseup', preventDefault\n\n  setCurrentSlide = (slide) ->\n    # set @current to slide's index in @slides\n    @current = indexOf @slides, slide\n\n  animateSlides = (currentSlide, targetSlide, {direction, initialProgress, durationMod}, callback) ->\n    # return if an animation is in progress\n    return if @currentAnimation?\n    # call onWillChange\n    unless @currentEvent? and @currentEvent.cancelOnWillChange\n      @options.onWillChange?.call @, currentSlide, targetSlide, (@current - direction / Math.abs(direction)) % @slides.length\n    # progress and durationMod are only passed from a touch event\n    progress = initialProgress ? 0\n    durationMod ?= 1\n    # alter the duration of the animation after a touch event\n    duration = Math.max 1, @options.animationDuration * (1 - progress) * durationMod\n    # slides shouldn't be prepared if this is called from a touch event\n    # because this has already happened in touchStart\n    unless @currentEvent?\n      effectBefore = @options.effect.before ? Function.prototype\n      effectBefore.call @, 0, currentSlide\n      effectBefore.call @, (if direction < 0 then 1 else -1), targetSlide\n    # cache the animation state\n    @currentAnimation = {start: now(), currentSlide, targetSlide, direction, duration, progress, callback}\n    # and finally start animating\n    requestAnimationFrame bind nextFrame, @\n\n  nextFrame = (timestamp) ->\n    # immediately call the next requestAnimationFrame\n    id = requestAnimationFrame bind nextFrame, @\n    anim = @currentAnimation\n    {start, progress, duration, direction, currentSlide, targetSlide, callback} = @currentAnimation\n    # calculate the actual progress (fraction of the animationDuration)\n    progress = progress + (now() - start) / duration * (1 - progress)\n    if progress >= 1\n      progress = 1\n      # the animation has ended\n      @currentAnimation = null\n      cancelAnimationFrame id\n      # call the after and callback functions\n      effectAfter = @options.effect.after ? Function.prototype\n      effectAfter.call @, 0, currentSlide\n      effectAfter.call @, 1, targetSlide\n      # set the new currentSlide\n      setCurrentSlide.call @, targetSlide\n      callback?.call @, currentSlide, targetSlide, @current\n      @options.onDidChange?.call @, currentSlide, targetSlide, @current\n      setCurrentSlide.call @, targetSlide\n    # call the progress functions\n    effectProgress = @options.effect.progress ? Function.prototype\n    effectProgress.call @, 0, progress * direction, currentSlide\n    effectProgress.call @, 1, progress * direction, targetSlide\n\n  eventStart = (event) ->\n    # do nothing if an animation or touch event is currently in progress\n    return if @currentAnimation? or @currentEvent?\n    # get the relevant slides\n    currentSlide = @getCurrentSlide()\n    prevSlide = @getPrevSlide()\n    nextSlide = @getNextSlide()\n    # prepare the slides to be animated\n    effectBefore = @options.effect.before ? Function.prototype\n    effectBefore.call @, 0, currentSlide\n    effectBefore.call @, -1, prevSlide\n    effectBefore.call @, 1, nextSlide\n    # cache the touch event state\n    {timeStamp} = event\n    {pageX: startX, pageY: startY} = event.touches?[0] ? event\n    @currentEvent = {currentSlide, prevSlide, nextSlide, timeStamp, startX, startY}\n\n  eventProgress = (event) ->\n    # do nothing if an animation is in progress, or there's no touch event in progress yet (which souldn't happen)\n    return if @currentAnimation or not @currentEvent?\n    {pageX, pageY} = event.touches?[0] ? event\n    # calculate the progress based on the distance touched\n    # progress = switch @options.animationDirection\n    #   when 'x' then (pageX - @currentEvent.startX) / @el.clientWidth\n    #   when 'y' then (pageY - @currentEvent.startY) / @el.clientHeight\n    progress =\n      x: (pageX - @currentEvent.startX) / @el.clientWidth\n      y: (pageY - @currentEvent.startY) / @el.clientHeight\n    progress = switch @options.animationDirection\n      when 'x'\n        if Math.abs(progress.x) > Math.abs(progress.y) then progress.x\n      when 'y'\n        if Math.abs(progress.y) > Math.abs(progress.x) then progress.y\n    @currentEvent.shouldCancel = !progress\n    return unless progress?\n    # get the target slide\n    targetSlide = if progress < 0 then @currentEvent.nextSlide else @currentEvent.prevSlide\n    if targetSlide isnt @currentEvent.targetSlide\n      @currentEvent.cancelOnWillChange = false\n      @currentEvent.targetslide = targetSlide\n    # trigger onWillChange event\n    unless @currentEvent.cancelOnWillChange and progress isnt 0\n      @currentEvent.cancelOnWillChange = true\n      nextIndex = (@current - progress / Math.abs progress) % @slides.length\n      @options.onWillChange?.call @, @currentEvent.currentSlide, targetSlide, (@current - progress / Math.abs progress) % @slides.length\n    @currentEvent.targetSlide = targetSlide\n    # animate the slide\n    requestAnimationFrame =>\n      effectProgress = @options.effect.progress ? Function.prototype\n      effectProgress.call @, 0, progress, @currentEvent.currentSlide\n      effectProgress.call @, 1, progress, targetSlide\n\n  eventEnd = (event) ->\n    # do nothing if an animation is in progress, or there's no touch event in progress yet (which souldn't happen)\n    return if @currentAnimation or not @currentEvent?\n    {timeStamp} = event\n    {pageX, pageY} = event.changedTouches?[0] ? event\n    # calculate the final progress that has been made\n    progress = switch @options.animationDirection\n      when 'x' then (pageX - @currentEvent.startX) / @el.clientWidth\n      when 'y' then (pageY - @currentEvent.startY) / @el.clientHeight\n    if @currentEvent.shouldCancel\n      currentSlide = if progress > 0 then @currentEvent.nextSlide else @currentEvent.prevSlide\n      direction = progress / Math.abs progress\n      initialProgress = 1 - Math.abs progress\n      animateSlides.call @, currentslide, @currentEvent.currentSlide, {direction, initialProgress}\n      @currentEvent = null\n      return\n    if progress is 0\n      @currentEvent = null\n      return\n    # calculate the time passed\n    timePassed = timeStamp - @currentEvent.timeStamp\n    progressAbs = Math.abs progress\n    # check progress and timePassed against the conditions\n    for condition in @options.effect.conditions\n      if progressAbs > condition.progress and timePassed < (condition.time ? Infinity)\n        # one condition passed so set durationMod from that condition\n        durationMod = condition.durationModifier ? 1\n        break\n    # at this point, durationMod is only set if we matched a condition\n    # so slide to the next slide\n    if durationMod?\n      # we matched a condition, so slide away the currentSlide and slide in\n      # the targetSlide. if we slided to the left, the nextSlide will be the\n      # targetSlide, else the prevSlide will be.\n      currentSlide = @currentEvent.currentSlide\n      direction = progress / progressAbs\n      if direction is 1\n        targetSlide = @currentEvent.prevSlide\n      else\n        targetSlide = @currentEvent.nextSlide\n      initialProgress = progressAbs\n    else\n      # we didn't match a condition, so slide the currentSlide back into\n      # position and slide targetSlide (nextSlide or prevSlide, depending on\n      # slide direction) away\n      targetSlide = @currentEvent.currentSlide\n      direction = -progress / progressAbs\n      if direction is 1\n        currentSlide = @currentEvent.nextSlide\n      else\n        currentSlide = @currentEvent.prevSlide\n      initialProgress = 1 - progressAbs\n    # call the animateSlides function with the parameters\n    animateSlides.call @, currentSlide, targetSlide, {direction, initialProgress, durationMod}, =>\n      @currentEvent = null\n\n  preventDefault = (event) ->\n    event.preventDefault()\n\n  # end private API\n\n  # public API\n\n  # get*Slide all return an HTMLElement\n\n  # get the slide at index i\n  # getSlide(-1) === getSlide(slides.length - 1)\n  # and getSlide(slides.length) === getSlide(0)\n  getSlide: (i) ->\n    i = i % @slides.length\n    if i < 0 then i += @slides.length\n    @slides[i]\n\n  # get the currently visible slide\n  getCurrentSlide: -> @slides[@current]\n\n  getCurrentIndex: -> @current\n\n  # get the slide after the currently visible one\n  getNextSlide: -> @getSlide @current + 1\n\n  # get the slide before the currently visible one\n  getPrevSlide: -> @getSlide @current - 1\n\n  # get the first slide\n  getFirstSlide: -> @slides[0]\n\n  # get the last slide\n  getLastSlide: -> @slides[@slides.length - 1]\n\n  # goTo* initiates an animation\n\n  # go to the slide at index i\n  goTo: (i, cb) ->\n    return if i is @current\n    currentSlide = @getCurrentSlide()\n    targetSlide = @getSlide i\n    # slide to left if i < @current, else slide to right\n    direction = if i < @current then 1 else -1\n    animateSlides.call @, currentSlide, targetSlide, {direction}, cb\n\n  # go to the next slide\n  goToNext: (cb) -> @goTo @current + 1, cb\n\n  # go to the previous slide\n  goToPrev: (cb) -> @goTo @current - 1, cb\n\n  # go to first slide\n  goToFirst: (cb) -> @goTo 0, cb\n\n  # go to last slide\n  goToLast: (cb) -> @goTo @slides.length - 1, cb\n\n  # destroy this instance\n  destroy: ->\n    @el.removeEventListener 'touchstart', @eventStart\n    @el.removeEventListener 'touchmove', @eventProgress\n    @el.removeEventListener 'touchend', @eventEnd\n    @el.removeEventListener 'mousedown', @eventStart\n    @el.removeEventListener 'mousemove', @eventProgress\n    @el.removeEventListener 'mouseup', @eventEnd\n    @el.removeEventListener 'mouseleave', @eventEnd\n    for slide in @slides\n      slide.removeEventListener 'mousedown', preventDefault\n      slide.removeEventListener 'mousemove', preventDefault\n      slide.removeEventListener 'mouseup', preventDefault\n    {@el, @slides, @eventStart, @eventProgress, @eventEnd, @options} = {}\n\n  # class methods\n\n  @registerAsJQueryPlugin: (jQuery, methodName = 'Slideshow') ->\n    jQuery.fn[methodName] = (options) -> (new Slideshow container, options for container in @)\n\n  @registerEffect: (name, effect) ->\n    effect.conditions ?= effects.default.conditions.concat()\n    effects[name] ?= effect\n\n# amd, commonjs and browser environment support\ndo (root = this) ->\n  # amd\n  if typeof define is 'function' and define.amd\n    define [], -> Slideshow\n  # commonjs\n  else if typeof exports isnt 'undefined'\n    module.exports = Slideshow\n  # browser\n  else\n    root.Slideshow = Slideshow\n"]}