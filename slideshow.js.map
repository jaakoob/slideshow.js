{"version":3,"sources":["slideshow.coffee"],"names":[],"mappings":"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","file":"slideshow.js","sourceRoot":"/source/","sourcesContent":["'use strict'\n# requestAnimationFrame polyfill\n# http://paulirish.com/2011/requestanimationframe-for-smart-animating/\n# http://my.opera.com/emoller/blog/2011/12/20/requestanimationframe-for-smart-er-animating\n\n# requestAnimationFrame polyfill by Erik Möller. fixes from Paul Irish and Tino Zijdel\n\n# MIT license\n\ndo (root = window ? this) ->\n  lastTime = 0\n  vendors = ['ms', 'moz', 'webkit', 'o']\n  i = 0\n  while i < vendors.length and not root.requestAnimationFrame\n    vendor = vendors[i++]\n    root.requestAnimationFrame = root[\"#{vendor}RequestAnimationFrame\"]\n    root.cancelAnimationFrame = root[\"#{vendor}CancelAnimationFrame\"] ? root[\"#{vendor}CancelRequestAnimationFrame\"]\n\n\n  unless root.requestAnimationFrame?\n    root.requestAnimationFrame = (callback) ->\n      currTime = new Date().getTime()\n      timeToCall = Math.max 0, 16 - (currTime - lastTime)\n      id = root.setTimeout (-> callback currTime + timeToCall), timeToCall\n      lastTime = currTime + timeToCall\n      id\n\n  unless root.cancelAnimationFrame?\n    root.cancelAnimationFrame = (id) ->\n      clearTimeout id\n\n# end requestAnimationFrame polyfill\n\n# indexOf(array, match) is equivalent to array.indexOf(match)\n\nindexOf = (array, match) ->\n  return unless array?\n  if Array::indexOf?\n    return Array::indexOf.call Array::slice.call(array), match\n  for item, i in array when item is match\n    return i\n  -1\n\n# extend target with properties from object in objects\n\nextend = (target, objects...) ->\n  return unless typeof target is 'object'\n  for object in objects\n    for own prop of object\n      target[prop] = object[prop]\n  target\n\n# shallow clone object\n\nclone = (object) -> extend {}, object\n\n# bind(fn, context) binds context to fn\n\nbind = (fn, context) -> -> fn.apply context, [].slice.call arguments\n\nnow = Date.now ? -> new Date().getTime()\n\nclass Slideshow\n  constructor: (element, options = {}) ->\n    # test if element is a valid html element or maybe\n    # a jQuery object or Backbone View\n    unless element.nodeType is 1\n      if element[0]? then element = element[0] # jQuery\n      if element.el? then element = element.el # Backbone\n    if element.nodeType isnt 1\n      throw new Error 'No valid element provided'\n    @configure options\n    @el = element\n    # and go!\n    init.call @\n\n  configure: (options) ->\n    @options = extend {}, defaults, options\n    if typeof @options.effect is 'string' and effects[@options.effect]?\n      @options.effect = clone effects[@options.effect]\n      @options.effect.conditions ?= effects.default.conditions.concat()\n\n  # private API\n\n  defaults =\n    touchEventsEnabled: true\n    mouseEventsEnabled: true\n    swipeThreshold: 0\n    animationDuration: 400\n    animationDirection: 'x'\n    effect: 'default'\n\n  effects =\n    default: do ->\n\n      transformCSSProperty = do ->\n        style = document.createElement('div').style\n        return 'transform' if style['transform']?\n        for vendor in ['moz', 'webkit', 'khtml', 'o', 'ms']\n          prefixed = \"#{vendor}Transform\"\n          return prefixed if style[prefixed]?\n        false\n\n      conditions: [\n        progress: .1\n        time: 250\n        durationModifier: .5\n      ,\n        progress: .3\n        time: 500\n      ,\n        progress: .5\n      ]\n      before: (slideState, slideElement) ->\n        slideElement.style.display = 'block'\n        ###\n        slideState  is either -1, 0 or 1\n        if slideState === 0 then this is the current slide and we want to show it, so set translateX(0)\n        if slideState === -1 then this is the previous slide (to the left) so translateX(-100%)\n        if slideState === 1 then this is the next slide (to the right) so translateX(100%)\n        ###\n        X = -slideState * 100\n        if transformCSSProperty\n          slideElement.style[transformCSSProperty] = \"translateX(#{X}%)\"\n        else\n          slideElement.style.left = \"#{X}%\"\n      progress: (slideState, progress, slideElement) ->\n        ###\n        slideState = either 0 or 1\n        0 <= Math.abs(progress) <= 1, but progress can also be negative.\n        progress < 0 indicates movement to the left\n        progress > 0 indicates movement to the right\n\n        if slideState === 0 then this is the current slide and we want it to move away as progress increases:\n        X1 = 100 * p where p = progress\n        if slideState === 1 then this is the target slide and we want it to move in from the left/right as progress increases:\n        X2 = 100 * (-p / |p|) * (|p| - 1) where |p| = Math.abs(progress)\n\n        X = (1 - S) * X1 + S * X2 where S = slideState\n        X is the translateX value that should be set on this slide\n\n        X = (1 - S) * 100 * p + S * 100 * (-p / |p|) * (1 - |p|)\n        X = 100 * p * ( (1 - S) - S * (1 / |p|) * (1 - |p|) )\n        X = 100 * p * ( 1 - S - S * ( (1 / |p|) - 1 ) )\n        X = 100 * p * ( 1 - S + S * (1 - (1 / |p|) ) )\n        X = 100 * p * ( 1 - S + S - (S / |p|) )\n        X = 100 * p * ( 1 - (S / |p|) )\n        ###\n        X = 100 * progress * (1 - slideState / Math.abs progress)\n        if transformCSSProperty\n          slideElement.style[transformCSSProperty] = \"translateX(#{X}%)\"\n        else\n          slideElement.style.left = \"#{X}%\"\n      after: (slideState, slideElement) ->\n        ###\n        slideState is either 0 or 1\n        if slideState === 0 then this is the previously visible slide and it must be hidden\n        if slideState === 1 then this is the currently visible slide and it must be visible\n        ###\n        slideElement.style.display = if slideState > 0 then 'block' else 'none'\n\n  init = ->\n    initSlides.call @\n    initEvents.call @\n\n  initSlides = ->\n    # we don't want the slides to be visible outside their container\n    effectBefore = @options.effect.before ? Function.prototype\n    effectAfter = @options.effect.after ? Function.prototype\n    # el.children may behave weird in IE8\n    @slides = @el.children ? @el.childNodes\n    @current = 0\n    for slide, i in @slides when i isnt @current\n      # call the before and after functions once on all slides, so all slides\n      # are positioned properly\n      if i is @current\n        effectBefore.call @, 0, @slides[@current]\n        effectAfter.call @, 1, @slides[@current]\n      else\n        effectBefore.call @, 1, slide\n        effectAfter.call @, 0, slide\n\n  initEvents = ->\n    @eventStart = bind eventStart, @\n    @eventProgress = bind eventProgress, @\n    @eventEnd = bind eventEnd, @\n    # check for TouchEvent support and if enabled in options\n    if TouchEvent? and @options.touchEventsEnabled\n      @el.addEventListener 'touchstart', @eventStart\n      @el.addEventListener 'touchmove', @eventProgress\n      @el.addEventListener 'touchend', @eventEnd\n    # check for MouseEvent support and if enabled in options\n    if MouseEvent? and @options.mouseEventsEnabled\n      @el.addEventListener 'mousedown', @eventStart\n      @el.addEventListener 'mousemove', @eventProgress\n      @el.addEventListener 'mouseup', @eventEnd\n      @el.addEventListener 'mouseleave', @eventEnd\n      for slide in @slides\n        slide.addEventListener 'mousedown', preventDefault\n        slide.addEventListener 'mousemove', preventDefault\n        slide.addEventListener 'mouseup', preventDefault\n\n  setCurrentSlide = (slide) ->\n    # set @current to slide's index in @slides\n    @current = indexOf @slides, slide\n\n  animateSlides = (currentSlide, targetSlide, {direction, initialProgress, durationMod}, callback) ->\n    # return if an animation is in progress\n    return if @currentAnimation?\n    # call onWillChange\n    unless @currentEvent? and @currentEvent.cancelOnWillChange\n      @options.onWillChange?.call @, currentSlide, targetSlide, (@current - direction / Math.abs(direction)) %% @slides.length\n    # progress and durationMod are only passed from a touch event\n    progress = initialProgress ? 0\n    durationMod ?= 1\n    # alter the duration of the animation after a touch event\n    duration = Math.max 1, @options.animationDuration * (1 - progress) * durationMod\n    # slides shouldn't be prepared if this is called from a touch event\n    # because this has already happened in touchStart\n    unless @currentEvent?\n      effectBefore = @options.effect.before ? Function.prototype\n      effectBefore.call @, 0, currentSlide\n      effectBefore.call @, (if direction < 0 then 1 else -1), targetSlide\n    # cache the animation state\n    @currentAnimation = {start: now(), currentSlide, targetSlide, direction, duration, progress, callback}\n    # and finally start animating\n    requestAnimationFrame bind nextFrame, @\n\n  nextFrame = (timestamp) ->\n    # immediately call the next requestAnimationFrame\n    id = requestAnimationFrame bind nextFrame, @\n    anim = @currentAnimation\n    {start, progress, duration, direction, currentSlide, targetSlide, callback} = @currentAnimation\n    # calculate the actual progress (fraction of the animationDuration)\n    progress = progress + (now() - start) / duration * (1 - progress)\n    if progress >= 1\n      progress = 1\n      # the animation has ended\n      @currentAnimation = null\n      cancelAnimationFrame id\n      # call the after and callback functions\n      effectAfter = @options.effect.after ? Function.prototype\n      effectAfter.call @, 0, currentSlide\n      effectAfter.call @, 1, targetSlide\n      # set the new currentSlide\n      setCurrentSlide.call @, targetSlide\n      if typeof callback == 'function'\n        callback.call @, currentSlide, targetSlide, @current\n      @options.onDidChange?.call @, currentSlide, targetSlide, @current\n      setCurrentSlide.call @, targetSlide\n    # call the progress functions\n    effectProgress = @options.effect.progress ? Function.prototype\n    effectProgress.call @, 0, progress * direction, currentSlide\n    effectProgress.call @, 1, progress * direction, targetSlide\n\n  eventStart = (event) ->\n    # do nothing if an animation or touch event is currently in progress\n    return if @currentAnimation? or @currentEvent?\n    # get the relevant slides\n    currentSlide = @getCurrentSlide()\n    prevSlide = @getPrevSlide()\n    nextSlide = @getNextSlide()\n    # prepare the slides to be animated\n    effectBefore = @options.effect.before ? Function.prototype\n    effectBefore.call @, 0, currentSlide\n    effectBefore.call @, -1, prevSlide\n    effectBefore.call @, 1, nextSlide\n    # cache the touch event state\n    {timeStamp} = event\n    {pageX: startX, pageY: startY} = event.touches?[0] ? event\n    @currentEvent = {currentSlide, prevSlide, nextSlide, timeStamp, startX, startY}\n\n  eventProgress = (event) ->\n    # do nothing if an animation is in progress, or there's no touch event in progress yet (which souldn't happen)\n    return if @currentAnimation or not @currentEvent?\n    {pageX, pageY} = event.touches?[0] ? event\n    # calculate the progress based on the distance touched\n    # progress = switch @options.animationDirection\n    #   when 'x' then (pageX - @currentEvent.startX) / @el.clientWidth\n    #   when 'y' then (pageY - @currentEvent.startY) / @el.clientHeight\n    progress =\n      x: (pageX - @currentEvent.startX) / @el.clientWidth\n      y: (pageY - @currentEvent.startY) / @el.clientHeight\n    progress = switch @options.animationDirection\n      when 'x'\n        if Math.abs(progress.x) > Math.abs(progress.y) then progress.x\n      when 'y'\n        if Math.abs(progress.y) > Math.abs(progress.x) then progress.y\n    @currentEvent.shouldCancel = !progress\n    return unless progress?\n    # get the target slide\n    targetSlide = if progress < 0 then @currentEvent.nextSlide else @currentEvent.prevSlide\n    if targetSlide isnt @currentEvent.targetSlide\n      @currentEvent.cancelOnWillChange = false\n      @currentEvent.targetSlide = targetSlide\n    # trigger onWillChange event\n    unless @currentEvent.cancelOnWillChange and progress isnt 0\n      @currentEvent.cancelOnWillChange = true\n      nextIndex = (@current - progress / Math.abs progress) %% @slides.length\n      @options.onWillChange?.call @, @currentEvent.currentSlide, targetSlide, nextIndex\n    @currentEvent.targetSlide = targetSlide\n    # animate the slide\n    requestAnimationFrame =>\n      effectProgress = @options.effect.progress ? Function.prototype\n      effectProgress.call @, 0, progress, @currentEvent.currentSlide\n      effectProgress.call @, 1, progress, targetSlide\n\n  eventEnd = (event) ->\n    # do nothing if an animation is in progress, or there's no touch event in progress yet (which souldn't happen)\n    return if @currentAnimation or not @currentEvent?\n    {timeStamp} = event\n    {pageX, pageY} = event.changedTouches?[0] ? event\n    # calculate the final progress that has been made\n    progress = switch @options.animationDirection\n      when 'x' then (pageX - @currentEvent.startX) / @el.clientWidth\n      when 'y' then (pageY - @currentEvent.startY) / @el.clientHeight\n    if @currentEvent.shouldCancel\n      currentSlide = if progress > 0 then @currentEvent.nextSlide else @currentEvent.prevSlide\n      direction = progress / Math.abs progress\n      initialProgress = 1 - Math.abs progress\n      animateSlides.call @, currentSlide, @currentEvent.currentSlide, {direction, initialProgress}\n      @currentEvent = null\n      return\n    if progress is 0\n      @currentEvent = null\n      return\n    # calculate the time passed\n    timePassed = timeStamp - @currentEvent.timeStamp\n    progressAbs = Math.abs progress\n    # check progress and timePassed against the conditions\n    for condition in @options.effect.conditions\n      if progressAbs > condition.progress and timePassed < (condition.time ? Infinity)\n        # one condition passed so set durationMod from that condition\n        durationMod = condition.durationModifier ? 1\n        break\n    # at this point, durationMod is only set if we matched a condition\n    # so slide to the next slide\n    if durationMod?\n      # we matched a condition, so slide away the currentSlide and slide in\n      # the targetSlide. if we slided to the left, the nextSlide will be the\n      # targetSlide, else the prevSlide will be.\n      currentSlide = @currentEvent.currentSlide\n      direction = progress / progressAbs\n      if direction is 1\n        targetSlide = @currentEvent.prevSlide\n      else\n        targetSlide = @currentEvent.nextSlide\n      initialProgress = progressAbs\n    else\n      # we didn't match a condition, so slide the currentSlide back into\n      # position and slide targetSlide (nextSlide or prevSlide, depending on\n      # slide direction) away\n      targetSlide = @currentEvent.currentSlide\n      direction = -progress / progressAbs\n      if direction is 1\n        currentSlide = @currentEvent.nextSlide\n      else\n        currentSlide = @currentEvent.prevSlide\n      initialProgress = 1 - progressAbs\n    # call the animateSlides function with the parameters\n    animateSlides.call @, currentSlide, targetSlide, {direction, initialProgress, durationMod}, =>\n      @currentEvent = null\n\n  preventDefault = (event) ->\n    event.preventDefault()\n\n  # end private API\n\n  # public API\n\n  # get*Slide all return an HTMLElement\n\n  # get the slide at index i\n  # getSlide(-1) === getSlide(slides.length - 1)\n  # and getSlide(slides.length) === getSlide(0)\n  getSlide: (i) ->\n    @slides[i %% @slides.length]\n\n  # get the currently visible slide\n  getCurrentSlide: -> @slides[@current]\n\n  getCurrentIndex: -> @current\n\n  # get the slide after the currently visible one\n  getNextSlide: -> @getSlide @current + 1\n\n  # get the slide before the currently visible one\n  getPrevSlide: -> @getSlide @current - 1\n\n  # get the first slide\n  getFirstSlide: -> @slides[0]\n\n  # get the last slide\n  getLastSlide: -> @slides[@slides.length - 1]\n\n  # goTo* initiates an animation\n\n  # go to the slide at index i\n  goTo: (i, cb) ->\n    return if i is @current\n    currentSlide = @getCurrentSlide()\n    targetSlide = @getSlide i\n    # slide to left if i < @current, else slide to right\n    direction = if i < @current then 1 else -1\n    animateSlides.call @, currentSlide, targetSlide, {direction}, cb\n\n  # go to the next slide\n  goToNext: (cb) -> @goTo @current + 1, cb\n\n  # go to the previous slide\n  goToPrev: (cb) -> @goTo @current - 1, cb\n\n  # go to first slide\n  goToFirst: (cb) -> @goTo 0, cb\n\n  # go to last slide\n  goToLast: (cb) -> @goTo @slides.length - 1, cb\n\n  # destroy this instance\n  destroy: ->\n    @el.removeEventListener 'touchstart', @eventStart\n    @el.removeEventListener 'touchmove', @eventProgress\n    @el.removeEventListener 'touchend', @eventEnd\n    @el.removeEventListener 'mousedown', @eventStart\n    @el.removeEventListener 'mousemove', @eventProgress\n    @el.removeEventListener 'mouseup', @eventEnd\n    @el.removeEventListener 'mouseleave', @eventEnd\n    for slide in @slides\n      slide.removeEventListener 'mousedown', preventDefault\n      slide.removeEventListener 'mousemove', preventDefault\n      slide.removeEventListener 'mouseup', preventDefault\n    {@el, @slides, @eventStart, @eventProgress, @eventEnd, @options} = {}\n\n  # class methods\n\n  @registerAsJQueryPlugin: (jQuery, methodName = 'Slideshow') ->\n    jQuery.fn[methodName] = (options) -> (new Slideshow container, options for container in @)\n\n  @registerEffect: (name, effect) ->\n    effect.conditions ?= effects.default.conditions.concat()\n    effects[name] ?= effect\n\n# amd, commonjs and browser environment support\ndo (root = this) ->\n  # amd\n  if typeof define is 'function' and define.amd\n    define [], -> Slideshow\n  # commonjs\n  else if typeof exports isnt 'undefined'\n    module.exports = Slideshow\n  # browser\n  else\n    root.Slideshow = Slideshow\n"]}